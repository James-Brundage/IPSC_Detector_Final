# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'IPSC_UI_1.0.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
This is the most updated version of the QT app I was putting together. Some of the windows don't work yet because
we decided to have Travis start working on some software, and I stopped putting this together. I don't think that
software ever came together.
"""

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from Classes import RecordingFile
import matplotlib.pyplot as plt
import pyqtgraph as pg
import pandas as pd


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(953, 824)

        # Variables
        self.trace = []
        self.unf_traceX = []
        self.unf_traceY = []
        self.f_traceX = []
        self.f_traceY = []
        self.peaks_df = []
        self.history = []
        self.PI = pd.DataFrame
        self.preds = []

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.Main_Graph = pg.PlotWidget(self.centralwidget)
        self.Main_Graph.setGeometry(QtCore.QRect(10, 20, 931, 231))
        self.Main_Graph.setObjectName("Main_Graph")
        self.Main_Graph.setBackground('w')

        self.Raw_Sig_Box = QtWidgets.QCheckBox(self.centralwidget)
        self.Raw_Sig_Box.setGeometry(QtCore.QRect(20, 470, 131, 20))
        self.Raw_Sig_Box.setObjectName("Raw_Sig_Box")

        self.Filtered_Sig_Box = QtWidgets.QCheckBox(self.centralwidget)
        self.Filtered_Sig_Box.setGeometry(QtCore.QRect(20, 490, 161, 20))
        self.Filtered_Sig_Box.setObjectName("Filtered_Sig_Box")

        self.FileSelectionLabel = QtWidgets.QLabel(self.centralwidget)
        self.FileSelectionLabel.setGeometry(QtCore.QRect(20, 260, 161, 41))
        self.FileSelectionLabel.setMaximumSize(QtCore.QSize(16777215, 41))
        self.FileSelectionLabel.setObjectName("FileSelectionLabel")

        self.Display_Signal_Btn = QtWidgets.QPushButton(self.centralwidget)
        self.Display_Signal_Btn.setGeometry(QtCore.QRect(180, 460, 111, 41))
        self.Display_Signal_Btn.setObjectName("Display_Signal_Btn")
        self.Display_Signal_Btn.clicked.connect(self.Display_Signal_Btn_Func)

        self.File_Text = QtWidgets.QTextBrowser(self.centralwidget)
        self.File_Text.setGeometry(QtCore.QRect(20, 290, 381, 61))
        self.File_Text.setObjectName("File_Text")

        self.GetFileBtn = QtWidgets.QPushButton(self.centralwidget)
        self.GetFileBtn.setGeometry(QtCore.QRect(10, 360, 201, 32))
        self.GetFileBtn.setObjectName("GetFileBtn")
        self.GetFileBtn.clicked.connect(self.Get_File_Btn_Press)

        self.TestFileBtn = QtWidgets.QPushButton(self.centralwidget)
        self.TestFileBtn.setGeometry(QtCore.QRect(210, 360, 201, 32))
        self.TestFileBtn.setObjectName("TestFileBtn")
        self.TestFileBtn.clicked.connect(self.Test_File_Btn_Press)

        self.DisplayOptionsLabel = QtWidgets.QLabel(self.centralwidget)
        self.DisplayOptionsLabel.setGeometry(QtCore.QRect(20, 440, 121, 16))
        self.DisplayOptionsLabel.setObjectName("DisplayOptionsLabel")

        self.Small_Graph = QtWidgets.QGraphicsView(self.centralwidget)
        self.Small_Graph.setGeometry(QtCore.QRect(700, 290, 241, 171))
        self.Small_Graph.setObjectName("Small_Graph")

        self.Peak_Display_Table = QtWidgets.QTableView(self.centralwidget)
        self.Peak_Display_Table.setGeometry(QtCore.QRect(440, 500, 501, 271))
        self.Peak_Display_Table.setObjectName("Peak_Display_Table")
        # self.Peak_Display_Table.setRowCount(1)
        # self.Peak_Display_Table.setColumnCount(1)
        # self.Peak_Display_Table.setItem(0, 0, QtWidgets.QTableWidgetItem('Text'))
        self.Peak_Display_Table.horizontalHeader().setVisible(True)
        self.Peak_Display_Table.horizontalHeader().setCascadingSectionResizes(True)

        self.Small_Graph_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.Small_Graph_2.setGeometry(QtCore.QRect(440, 290, 241, 171))
        self.Small_Graph_2.setObjectName("Small_Graph_2")

        self.Peak_Vis_Label = QtWidgets.QLabel(self.centralwidget)
        self.Peak_Vis_Label.setGeometry(QtCore.QRect(440, 260, 161, 41))
        self.Peak_Vis_Label.setMaximumSize(QtCore.QSize(16777215, 41))
        self.Peak_Vis_Label.setObjectName("Peak_Vis_Label")

        self.Show_Peaks_Box = QtWidgets.QCheckBox(self.centralwidget)
        self.Show_Peaks_Box.setGeometry(QtCore.QRect(20, 510, 161, 20))
        self.Show_Peaks_Box.setObjectName("Show_Peaks_Box")

        self.Peak_Information_Label = QtWidgets.QLabel(self.centralwidget)
        self.Peak_Information_Label.setGeometry(QtCore.QRect(440, 480, 121, 16))
        self.Peak_Information_Label.setObjectName("Peak_Information_Label")

        self.Load_File_Btn = QtWidgets.QPushButton(self.centralwidget)
        self.Load_File_Btn.setGeometry(QtCore.QRect(10, 390, 201, 32))
        self.Load_File_Btn.setObjectName("Load_File_Btn")
        self.Load_File_Btn.clicked.connect(self.load_file_btn_press)

        self.To_History_Btn = QtWidgets.QPushButton(self.centralwidget)
        self.To_History_Btn.setGeometry(QtCore.QRect(210, 390, 201, 32))
        self.To_History_Btn.setObjectName("To_History_Btn")
        self.To_History_Btn.clicked.connect(self.history_press)

        self.Load_Peaks_Btn = QtWidgets.QPushButton(self.centralwidget)
        self.Load_Peaks_Btn.setGeometry(QtCore.QRect(180, 500, 111, 41))
        self.Load_Peaks_Btn.setObjectName("Load_Peaks_Btn")
        self.Load_Peaks_Btn.clicked.connect(self.Load_Peaks_Btn_Press)
        self.Load_Peaks_Btn.clicked.connect(self.table_btn)

        self.File_History_Label = QtWidgets.QLabel(self.centralwidget)
        self.File_History_Label.setGeometry(QtCore.QRect(20, 560, 121, 16))
        self.File_History_Label.setObjectName("File_History_Label")

        self.History_Table = QtWidgets.QTableWidget(self.centralwidget)
        self.History_Table.setGeometry(QtCore.QRect(20, 580, 381, 191))
        self.History_Table.setObjectName("History_Table")
        self.History_Table.setRowCount(0)
        self.History_Table.setColumnCount(1)

        self.ClearData = QtWidgets.QPushButton(self.centralwidget)
        self.ClearData.setGeometry(QtCore.QRect(290, 460, 111, 41))
        self.ClearData.setObjectName("ClearData")
        self.ClearData.clicked.connect(self.clear_btn)

        self.ExportBtn = QtWidgets.QPushButton(self.centralwidget)
        self.ExportBtn.setGeometry(QtCore.QRect(290, 500, 111, 41))
        self.ExportBtn.setObjectName("ExportBtn")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 953, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionExport_file = QtWidgets.QAction(MainWindow)
        self.actionExport_file.setObjectName("actionExport_file")
        self.actionExport_from_history = QtWidgets.QAction(MainWindow)
        self.actionExport_from_history.setObjectName("actionExport_from_history")
        self.menuFile.addAction(self.actionExport_file)
        self.menuFile.addAction(self.actionExport_from_history)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Raw_Sig_Box.setText(_translate("MainWindow", "Show Raw Signal"))
        self.Filtered_Sig_Box.setText(_translate("MainWindow", "Show Filtered Signal"))
        self.FileSelectionLabel.setText(_translate("MainWindow", "File Selection"))
        self.Display_Signal_Btn.setText(_translate("MainWindow", "Display Signal"))
        self.GetFileBtn.setText(_translate("MainWindow", "Get File"))
        self.TestFileBtn.setText(_translate("MainWindow", "Use Test File"))
        self.DisplayOptionsLabel.setText(_translate("MainWindow", "Display Options"))
        self.Peak_Vis_Label.setText(_translate("MainWindow", "Peak Visualization"))
        self.Show_Peaks_Box.setText(_translate("MainWindow", "Show Peak Predictions"))
        self.Peak_Information_Label.setText(_translate("MainWindow", "Peak Information"))
        self.Load_File_Btn.setText(_translate("MainWindow", "Load File"))
        self.To_History_Btn.setText(_translate("MainWindow", "Add File to History"))
        self.Load_Peaks_Btn.setText(_translate("MainWindow", "Load Peaks"))
        self.File_History_Label.setText(_translate("MainWindow", "File History"))
        self.ClearData.setText(_translate("MainWindow", "Clear Data"))
        self.ExportBtn.setText(_translate("MainWindow", "Export"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionCopy.setText(_translate("MainWindow", "Copy"))
        self.actionPaste.setText(_translate("MainWindow", "Paste"))
        self.actionExport_file.setText(_translate("MainWindow", "Export file"))
        self.actionExport_from_history.setText(_translate("MainWindow", "Export from history"))

    def Get_File_Btn_Press(self):
        fn = self.open_dialog_box()
        self.File_Text.setText(fn)

    def Test_File_Btn_Press(self):
        self.File_Text.clear()
        self.File_Text.setPlainText('Datasets/7_30_2019 264 Continuous Export.abf')
        # self.File_Text.setText('7_30_2019 264 Continuous Export.abf')
        print(self.File_Text.toPlainText())

    def open_dialog_box(self):
        filename = QFileDialog.getOpenFileName()
        path = filename[0]
        return path

    def load_file_btn_press(self):
        self.unf_traceX, self.unf_traceY, self.f_traceX, self.f_traceY, self.trace = self.get_dfs_loaded()

        # self.Peak_Display_Table.setItem()

    def Find_Peaks_Btn_Press(self):
        x, y = self.unfiltered_rec()
        xf, yf = self.filtered_rec()
        # self.Main_Graph.setBackground('w')
        pen = pg.mkPen(color=(95, 168, 211))
        pen_1 = pg.mkPen(color=(255, 0, 0))

        self.Main_Graph.clear()

        if (self.Raw_Sig_Box.isChecked() == True) & (self.Filtered_Sig_Box.isChecked() == True):
            unf_line = self.Main_Graph.plot(x, y, pen=pen)
            fil_line = self.Main_Graph.plot(x, yf, pen=pen_1)
            vLine = pg.InfiniteLine(angle=90, movable=True)
            self.Main_Graph.addItem(vLine, ignoreBounds=True)


        elif (self.Raw_Sig_Box.isChecked() == True) & (self.Filtered_Sig_Box.isChecked() == False):
            unf_line = self.Main_Graph.plot(x, y, pen=pen)
            vLine = pg.InfiniteLine(angle=90, movable=True)
            self.Main_Graph.addItem(vLine, ignoreBounds=True)

        elif (self.Raw_Sig_Box.isChecked() == False) & (self.Filtered_Sig_Box.isChecked() == True):
            fil_line = self.Main_Graph.plot(x, yf, pen=pen_1)
            vLine = pg.InfiniteLine(angle=90, movable=True)
            self.Main_Graph.addItem(vLine, ignoreBounds=True)

    def Display_Signal_Btn_Func(self):
        pen = pg.mkPen(color=(95, 168, 211))
        pen_1 = pg.mkPen(color=(255, 0, 0))

        x = self.unf_traceX
        y = self.unf_traceY
        xf = self.f_traceX
        yf = self.f_traceY

        self.Main_Graph.clear()

        if (self.Raw_Sig_Box.isChecked() == True) & (self.Filtered_Sig_Box.isChecked() == True):
            unf_line = self.Main_Graph.plot(x, y, pen=pen)
            fil_line = self.Main_Graph.plot(x, yf, pen=pen_1)

        elif (self.Raw_Sig_Box.isChecked() == True) & (self.Filtered_Sig_Box.isChecked() == False):
            unf_line = self.Main_Graph.plot(x, y, pen=pen)

        elif (self.Raw_Sig_Box.isChecked() == False) & (self.Filtered_Sig_Box.isChecked() == True):
            fil_line = self.Main_Graph.plot(x, yf, pen=pen_1)

    def get_dfs_loaded(self):
        # Placeholder for a separate file
        test_file = self.File_Text.toPlainText()

        # Uses recording file class to get the x and y coords for the unfiltered plot
        file = RecordingFile(file_path=test_file)

        self.preds = file.create_display_df()

        self.PI = file.peak_info
        rec_df = file.abf_init
        cols = list(rec_df.columns)
        x = rec_df[cols[0]]
        y = rec_df[cols[1]]
        pdf = file.processed
        cols1 = list(pdf.columns)
        xf = pdf[cols1[0]]
        yf = pdf[cols1[1]]

        return x, y, xf, yf, file

    def Load_Peaks_Btn_Press(self):

        if len(self.peaks_df) == 0:
            file = self.trace
            gs = file.create_display_df()
            gs = gs[gs['Prediction'] == 1].copy()
            gs['Time'] = gs['Time'] / 10000
            print(gs)

            self.peaks_df = gs

        if self.Show_Peaks_Box.isChecked() == True:
            pen = pg.mkPen(color=(95, 168, 211))

            plt.scatter(self.peaks_df['Time'], self.peaks_df['Current'])
            plt.show()
            self.Main_Graph.plot(x=list(self.peaks_df['Time']), y=list(self.peaks_df['Current']), pen=None, symbol='o')

        else:
            self.Main_Graph.clear()


    def history_press(self):

        if self.File_Text in self.history:
            print('File already in history.')

        else:
            self.History_Table.insertRow(self.History_Table.rowCount())
            item = QtWidgets.QTableWidgetItem(self.File_Text.toPlainText())
            self.History_Table.setItem(self.History_Table.rowCount() - 1, 0, item)
            self.history.append(self.File_Text)

            header = self.History_Table.horizontalHeader()
            self.History_Table.horizontalHeader().setVisible(True)
            self.History_Table.horizontalHeader().setCascadingSectionResizes(False)
            header.setStretchLastSection(True)

    def clear_btn(self):
        self.Main_Graph.clear()
        self.trace = []
        self.unf_traceX = []
        self.unf_traceY = []
        self.f_traceX = []
        self.f_traceY = []
        self.peaks_df = []
        self.peaks_df = []
        self.File_Text.clear()
        self.Peak_Display_Table.setModel(None)

    def table_btn (self):
        self.Peak_Display_Table.reset()
        df = self.PI
        df['Time'] = df['Time'] / 10000
        df = df.round(4)
        model = PandasModel(df)
        self.Peak_Display_Table.setModel(model)
        header1 = self.Peak_Display_Table.horizontalHeader()
        header1.setStretchLastSection(True)

class PandasModel(QtCore.QAbstractTableModel):
    def __init__(self, df = pd.DataFrame(), parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent=parent)
        self._df = df.copy()

    def toDataFrame(self):
        return self._df.copy()

    def headerData(self, section, orientation, role=QtCore.Qt.DisplayRole):
        if role != QtCore.Qt.DisplayRole:
            return QtCore.QVariant()

        if orientation == QtCore.Qt.Horizontal:
            try:
                return self._df.columns.tolist()[section]
            except (IndexError, ):
                return QtCore.QVariant()
        elif orientation == QtCore.Qt.Vertical:
            try:
                # return self.df.index.tolist()
                return self._df.index.tolist()[section]
            except (IndexError, ):
                return QtCore.QVariant()

    def data(self, index, role=QtCore.Qt.DisplayRole):
        if role != QtCore.Qt.DisplayRole:
            return QtCore.QVariant()

        if not index.isValid():
            return QtCore.QVariant()

        return QtCore.QVariant(str(self._df.iloc[index.row(), index.column()]))

    def setData(self, index, value, role):
        row = self._df.index[index.row()]
        col = self._df.columns[index.column()]
        if hasattr(value, 'toPyObject'):
            # PyQt4 gets a QVariant
            value = value.toPyObject()
        else:
            # PySide gets an unicode
            dtype = self._df[col].dtype
            if dtype != object:
                value = None if value == '' else dtype.type(value)
        self._df.set_value(row, col, value)
        return True

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self._df.index)

    def columnCount(self, parent=QtCore.QModelIndex()):
        return len(self._df.columns)

    def sort(self, column, order):
        colname = self._df.columns.tolist()[column]
        self.layoutAboutToBeChanged.emit()
        self._df.sort_values(colname, ascending= order == QtCore.Qt.AscendingOrder, inplace=True)
        self._df.reset_index(inplace=True, drop=True)
        self.layoutChanged.emit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())